    {"SmallestCircleXld", (PyCFunction)PyHirschXLDArray_SmallestCircleXld, METH_NOARGS, "SmallestCircleXld()\n\nSmallest enclosing circle of contours or polygons." },
    {"CopyHXLDArray", (PyCFunction)PyHirschXLDArray_CopyHXLDArray, METH_VARARGS, "CopyHXLDArray(in)\n\n" },
    {"EccentricityXld", (PyCFunction)PyHirschXLDArray_EccentricityXld, METH_NOARGS, "EccentricityXld()\n\nShape features derived from the ellipse parameters of contours or polygons." },
    {"AreaCenterXld", (PyCFunction)PyHirschXLDArray_AreaCenterXld, METH_NOARGS, "AreaCenterXld()\n\nArea and center of gravity (centroid) of contours and polygons." },
    {"TestXldPoint", (PyCFunction)PyHirschXLDArray_TestXldPoint, METH_VARARGS, "TestXldPoint(Row,Column)\n\nTest whether one or more contours or polygons enclose the given point(s)." },
    {"CompactnessXld", (PyCFunction)PyHirschXLDArray_CompactnessXld, METH_NOARGS, "CompactnessXld()\n\nShape factor for the compactness of contours or polygons." },
    {"OrientationXld", (PyCFunction)PyHirschXLDArray_OrientationXld, METH_NOARGS, "OrientationXld()\n\nOrientation of contours or polygons." },
    {"EccentricityPointsXld", (PyCFunction)PyHirschXLDArray_EccentricityPointsXld, METH_NOARGS, "EccentricityPointsXld()\n\nAnisometry of contours or polygons treated as point clouds." },
    {"OrientationPointsXld", (PyCFunction)PyHirschXLDArray_OrientationPointsXld, METH_NOARGS, "OrientationPointsXld()\n\nOrientation of contours or polygons treated as point clouds." },
    {"SelectXldPoint", (PyCFunction)PyHirschXLDArray_SelectXldPoint, METH_VARARGS, "SelectXldPoint(Row,Column)\n\nChoose all contours or polygons containing a given point." },
    {"MomentsAnyXld", (PyCFunction)PyHirschXLDArray_MomentsAnyXld, METH_VARARGS, "MomentsAnyXld(Mode,PointOrder,Area,CenterRow,CenterCol,P,Q)\n\nArbitrary geometric moments of contours or polygons." },
    {"PaintXld", (PyCFunction)PyHirschXLDArray_PaintXld, METH_VARARGS, "PaintXld(Image,Grayval)\n\nPaint XLD objects into an image." },
    {"SmallestRectangle2Xld", (PyCFunction)PyHirschXLDArray_SmallestRectangle2Xld, METH_NOARGS, "SmallestRectangle2Xld()\n\nSmallest enclosing rectangle with arbitrary orientation of contours or \npolygons." },
    {"SelectShapeXld", (PyCFunction)PyHirschXLDArray_SelectShapeXld, METH_VARARGS, "SelectShapeXld(Features,Operation,Min,Max)\n\nSelect contours or polygons using shape features." },
    {"MomentsAnyPointsXld", (PyCFunction)PyHirschXLDArray_MomentsAnyPointsXld, METH_VARARGS, "MomentsAnyPointsXld(Mode,Area,CenterRow,CenterCol,P,Q)\n\nArbitrary geometric moments of contours or polygons treated as point\nclouds." },
    {"TestSelfIntersectionXld", (PyCFunction)PyHirschXLDArray_TestSelfIntersectionXld, METH_VARARGS, "TestSelfIntersectionXld(CloseXLD)\n\nTest XLD contours or polygons for self intersection." },
    {"Elem", (PyCFunction)PyHirschXLDArray_Elem, METH_VARARGS, "Elem(index)\n\nAccessing array elements without index checking -> fast AND risky" },
    {"EllipticAxisXld", (PyCFunction)PyHirschXLDArray_EllipticAxisXld, METH_NOARGS, "EllipticAxisXld()\n\nParameters of the equivalent ellipse of contours or polygons." },
    {"GetCirclePose", (PyCFunction)PyHirschXLDArray_GetCirclePose, METH_VARARGS, "GetCirclePose(CamParam,Radius,OutputType)\n\nDetermine the 3D pose of a circle from its perspective 2D projection." },
    {"MomentsXld", (PyCFunction)PyHirschXLDArray_MomentsXld, METH_NOARGS, "MomentsXld()\n\nGeometric moments M20, M02, and \nM11 of contours or polygons." },
    {"InstClassName", (PyCFunction)PyHirschXLDArray_InstClassName, METH_NOARGS, "InstClassName()\n\n" },
    {"DiameterXld", (PyCFunction)PyHirschXLDArray_DiameterXld, METH_NOARGS, "DiameterXld()\n\nMaximum distance between two contour or polygon points." },
    {"AreaCenterPointsXld", (PyCFunction)PyHirschXLDArray_AreaCenterPointsXld, METH_NOARGS, "AreaCenterPointsXld()\n\nArea and center of gravity (centroid) of contours and polygons\ntreated as point clouds." },
    {"CircularityXld", (PyCFunction)PyHirschXLDArray_CircularityXld, METH_NOARGS, "CircularityXld()\n\nShape factor for the circularity (similarity to a circle) of contours or \npolygons." },
    {"ShapeTransXld", (PyCFunction)PyHirschXLDArray_ShapeTransXld, METH_VARARGS, "ShapeTransXld(Type)\n\nTransform the shape of contours or polygons." },
    {"HClassName", (PyCFunction)PyHirschXLDArray_HClassName, METH_NOARGS, "HClassName()\n\nTools" },
    {"LengthXld", (PyCFunction)PyHirschXLDArray_LengthXld, METH_NOARGS, "LengthXld()\n\nLength of contours or polygons." },
    {"MomentsPointsXld", (PyCFunction)PyHirschXLDArray_MomentsPointsXld, METH_NOARGS, "MomentsPointsXld()\n\nGeometric moments M20, M02, and M11\nof contours or polygons treated as point clouds." },
    {"EllipticAxisPointsXld", (PyCFunction)PyHirschXLDArray_EllipticAxisPointsXld, METH_NOARGS, "EllipticAxisPointsXld()\n\nParameters of the equivalent ellipse of contours or polygons treated as \npoint clouds." },
    {"DispXld", (PyCFunction)PyHirschXLDArray_DispXld, METH_VARARGS, "DispXld(WindowHandle)\n\nDisplay an XLD object." },
    {"GetRectanglePose", (PyCFunction)PyHirschXLDArray_GetRectanglePose, METH_VARARGS, "GetRectanglePose(CamParam,Width,Height,WeightingMode,ClippingFactor)\n\nDetermine the 3D pose of a rectangle from its perspective 2D\nprojection" },
    {"ConvexityXld", (PyCFunction)PyHirschXLDArray_ConvexityXld, METH_NOARGS, "ConvexityXld()\n\nShape factor for the convexity of contours or polygons." },
    {"DeleteArray", (PyCFunction)PyHirschXLDArray_DeleteArray, METH_NOARGS, "DeleteArray()\n\n" },
    {"SmallestRectangle1Xld", (PyCFunction)PyHirschXLDArray_SmallestRectangle1Xld, METH_NOARGS, "SmallestRectangle1Xld()\n\nEnclosing rectangle parallel to the coordinate axes of contours or polygons." },
    {"Append", (PyCFunction)PyHirschXLDArray_Append, METH_VARARGS, "Append(xld)\n\n" },