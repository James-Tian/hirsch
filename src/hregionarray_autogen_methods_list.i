    {"SpatialRelation", (PyCFunction)PyHirschRegionArray_SpatialRelation, METH_VARARGS, "SpatialRelation(Regions2,Percent)\n\nPose relation of regions with regard to  the coordinate axes." },
    {"GenCoocMatrix", (PyCFunction)PyHirschRegionArray_GenCoocMatrix, METH_VARARGS, "GenCoocMatrix(Image,LdGray,Direction)\n\nCalculate the co-occurrence matrix of a region in an image." },
    {"OpeningRectangle1", (PyCFunction)PyHirschRegionArray_OpeningRectangle1, METH_VARARGS, "OpeningRectangle1(Width,Height)\n\nOpen a region with a rectangular structuring element." },
    {"MomentsRegion2ndRelInvar", (PyCFunction)PyHirschRegionArray_MomentsRegion2ndRelInvar, METH_NOARGS, "MomentsRegion2ndRelInvar()\n\nGeometric moments of regions." },
    {"SelectRegionPoint", (PyCFunction)PyHirschRegionArray_SelectRegionPoint, METH_VARARGS, "SelectRegionPoint(Row,Column)\n\nChoose all regions containing a given pixel." },
    {"MorphSkeleton", (PyCFunction)PyHirschRegionArray_MorphSkeleton, METH_NOARGS, "MorphSkeleton()\n\nCompute the morphological skeleton of a region." },
    {"Roundness", (PyCFunction)PyHirschRegionArray_Roundness, METH_NOARGS, "Roundness()\n\nShape factors from contour." },
    {"AreaCenterGray", (PyCFunction)PyHirschRegionArray_AreaCenterGray, METH_VARARGS, "AreaCenterGray(Image)\n\nCompute the area and center of gravity of a region in a gray value\nimage." },
    {"SmallestCircle", (PyCFunction)PyHirschRegionArray_SmallestCircle, METH_NOARGS, "SmallestCircle()\n\nSmallest surrounding circle of a region." },
    {"TestEqualRegion", (PyCFunction)PyHirschRegionArray_TestEqualRegion, METH_VARARGS, "TestEqualRegion(Regions2)\n\nTest whether the regions of two objects are identical." },
    {"ClassDBID", (PyCFunction)PyHirschRegionArray_ClassDBID, METH_NOARGS, "ClassDBID()\n\n" },
    {"SplitSkeletonLines", (PyCFunction)PyHirschRegionArray_SplitSkeletonLines, METH_VARARGS, "SplitSkeletonLines(MaxDistance)\n\nSplit lines represented by one pixel wide, non-branching lines." },
    {"ThickeningGolay", (PyCFunction)PyHirschRegionArray_ThickeningGolay, METH_VARARGS, "ThickeningGolay(GolayElement,Rotation)\n\nAdd the result of a hit-or-miss operation to a region (using a Golay\nstructuring element)." },
    {"SelectGray", (PyCFunction)PyHirschRegionArray_SelectGray, METH_VARARGS, "SelectGray(Image,Features,Operation,Min,Max)\n\nSelect regions based on gray value features." },
    {"InnerRectangle1", (PyCFunction)PyHirschRegionArray_InnerRectangle1, METH_NOARGS, "InnerRectangle1()\n\nLargest inner rectangle of a region." },
    {"TestSubsetRegion", (PyCFunction)PyHirschRegionArray_TestSubsetRegion, METH_VARARGS, "TestSubsetRegion(Region2)\n\nTest whether a region is contained in another region." },
    {"MomentsRegionCentralInvar", (PyCFunction)PyHirschRegionArray_MomentsRegionCentralInvar, METH_NOARGS, "MomentsRegionCentralInvar()\n\nGeometric moments of regions." },
    {"TextLineOrientation", (PyCFunction)PyHirschRegionArray_TextLineOrientation, METH_VARARGS, "TextLineOrientation(Image,CharHeight,OrientationFrom,OrientationTo)\n\nDetermines the orientation of a text line or paragraph." },
    {"ClipRegion", (PyCFunction)PyHirschRegionArray_ClipRegion, METH_VARARGS, "ClipRegion(Row1,Column1,Row2,Column2)\n\nClip a region to a rectangle." },
    {"SortRegion", (PyCFunction)PyHirschRegionArray_SortRegion, METH_VARARGS, "SortRegion(SortMode,Order,RowOrCol)\n\nSorting of regions with respect to their relative position." },
    {"Convexity", (PyCFunction)PyHirschRegionArray_Convexity, METH_NOARGS, "Convexity()\n\nShape factor for the convexity of a region." },
    {"PolarTransRegionInv", (PyCFunction)PyHirschRegionArray_PolarTransRegionInv, METH_VARARGS, "PolarTransRegionInv(Row,Column,AngleStart,AngleEnd,RadiusStart,RadiusEnd,WidthIn,HeightIn,Width,Height,Interpolation)\n\nTransform a region in polar coordinates back to cartesian\ncoordinates." },
    {"GrayHisto", (PyCFunction)PyHirschRegionArray_GrayHisto, METH_VARARGS, "GrayHisto(Image)\n\nCalculate the gray value distribution." },
    {"PartitionDynamic", (PyCFunction)PyHirschRegionArray_PartitionDynamic, METH_VARARGS, "PartitionDynamic(Distance,Percent)\n\nPartition a region horizontally at positions of small vertical extent." },
    {"RegionToLabel", (PyCFunction)PyHirschRegionArray_RegionToLabel, METH_VARARGS, "RegionToLabel(Type,Width,Height)\n\nConvert regions to a label image." },
    {"HammingDistance", (PyCFunction)PyHirschRegionArray_HammingDistance, METH_VARARGS, "HammingDistance(Regions2)\n\nHamming distance between two regions." },
    {"MorphSkiz", (PyCFunction)PyHirschRegionArray_MorphSkiz, METH_VARARGS, "MorphSkiz(Iterations1,Iterations2)\n\nThinning of a region." },
    {"ThinningSeq", (PyCFunction)PyHirschRegionArray_ThinningSeq, METH_VARARGS, "ThinningSeq(GolayElement,Iterations)\n\nRemove the result of a hit-or-miss operation from a region (sequential)." },
    {"Compactness", (PyCFunction)PyHirschRegionArray_Compactness, METH_NOARGS, "Compactness()\n\nShape factor for the compactness of a region." },
    {"GrayHistoAbs", (PyCFunction)PyHirschRegionArray_GrayHistoAbs, METH_VARARGS, "GrayHistoAbs(Image,Quantization)\n\nCalculate the gray value distribution." },
    {"Closing", (PyCFunction)PyHirschRegionArray_Closing, METH_VARARGS, "Closing(StructElement)\n\nClose a region." },
    {"ExpandGrayRef", (PyCFunction)PyHirschRegionArray_ExpandGrayRef, METH_VARARGS, "ExpandGrayRef(Image,ForbiddenArea,Iterations,Mode,RefGray,Threshold)\n\nFill gaps between regions (depending on gray value or color) or split\noverlapping regions." },
    {"MorphHat", (PyCFunction)PyHirschRegionArray_MorphHat, METH_VARARGS, "MorphHat(StructElement)\n\nCompute the union of bottom_hat and top_hat." },
    {"CloseEdgesLength", (PyCFunction)PyHirschRegionArray_CloseEdgesLength, METH_VARARGS, "CloseEdgesLength(Gradient,MinAmplitude,MaxGapLength)\n\nClose edge gaps using the edge amplitude image." },
    {"RunlengthFeatures", (PyCFunction)PyHirschRegionArray_RunlengthFeatures, METH_NOARGS, "RunlengthFeatures()\n\nCharacteristic values for runlength coding of regions." },
    {"SmallestRectangle1", (PyCFunction)PyHirschRegionArray_SmallestRectangle1, METH_NOARGS, "SmallestRectangle1()\n\nSurrounding rectangle parallel to the coordinate axes." },
    {"SmallestRectangle2", (PyCFunction)PyHirschRegionArray_SmallestRectangle2, METH_NOARGS, "SmallestRectangle2()\n\nSmallest surrounding rectangle with any orientation." },
    {"Skeleton", (PyCFunction)PyHirschRegionArray_Skeleton, METH_NOARGS, "Skeleton()\n\nCompute the skeleton of a region." },
    {"BackgroundSeg", (PyCFunction)PyHirschRegionArray_BackgroundSeg, METH_NOARGS, "BackgroundSeg()\n\nDetermine the connected components of the background of given regions." },
    {"Intensity", (PyCFunction)PyHirschRegionArray_Intensity, METH_VARARGS, "Intensity(Image)\n\nCalculate the mean and deviation of gray values." },
    {"WriteOcrTrainf", (PyCFunction)PyHirschRegionArray_WriteOcrTrainf, METH_VARARGS, "WriteOcrTrainf(Image,Class,FileName)\n\nStoring of trained characters into a file." },
    {"AppendOcrTrainf", (PyCFunction)PyHirschRegionArray_AppendOcrTrainf, METH_VARARGS, "AppendOcrTrainf(Image,Class,FileName)\n\nAdd characters to a training file." },
    {"FitSurfaceFirstOrder", (PyCFunction)PyHirschRegionArray_FitSurfaceFirstOrder, METH_VARARGS, "FitSurfaceFirstOrder(Image,Algorithm,Iterations,ClippingFactor)\n\nCalculate gray value moments and approximation by a first order surface\n(plane)." },
    {"HitOrMissSeq", (PyCFunction)PyHirschRegionArray_HitOrMissSeq, METH_VARARGS, "HitOrMissSeq(GolayElement)\n\nHit-or-miss operation for regions using the Golay alphabet (sequential)." },
    {"Pruning", (PyCFunction)PyHirschRegionArray_Pruning, METH_VARARGS, "Pruning(Length)\n\nPrune the branches of a region." },
    {"SelectShapeStd", (PyCFunction)PyHirschRegionArray_SelectShapeStd, METH_VARARGS, "SelectShapeStd(Shape,Percent)\n\nSelect regions of a given shape." },
    {"RemoveNoiseRegion", (PyCFunction)PyHirschRegionArray_RemoveNoiseRegion, METH_VARARGS, "RemoveNoiseRegion(Type)\n\nRemove noise from a region." },
    {"GenRegionHline", (PyCFunction)PyHirschRegionArray_GenRegionHline, METH_STATIC|METH_VARARGS, "GenRegionHline(Orientation,Distance)\n\nStore input lines described in Hesse normal form as regions." },
    {"MinkowskiAdd2", (PyCFunction)PyHirschRegionArray_MinkowskiAdd2, METH_VARARGS, "MinkowskiAdd2(StructElement,Row,Column,Iterations)\n\nDilate a region (using a reference point)." },
    {"MinkowskiSub2", (PyCFunction)PyHirschRegionArray_MinkowskiSub2, METH_VARARGS, "MinkowskiSub2(StructElement,Row,Column,Iterations)\n\nErode a region (using a reference point)." },
    {"GenRectangle2", (PyCFunction)PyHirschRegionArray_GenRectangle2, METH_STATIC|METH_VARARGS, "GenRectangle2(Row,Column,Phi,Length1,Length2)\n\nCreate a rectangle of any orientation." },
    {"Histo2dim", (PyCFunction)PyHirschRegionArray_Histo2dim, METH_VARARGS, "Histo2dim(ImageCol,ImageRow)\n\nCalculate the histogram of two-channel gray value images." },
    {"MinMaxGray", (PyCFunction)PyHirschRegionArray_MinMaxGray, METH_VARARGS, "MinMaxGray(Image,Percent)\n\nDetermine the minimum and maximum gray values within regions." },
    {"RegionToBin", (PyCFunction)PyHirschRegionArray_RegionToBin, METH_VARARGS, "RegionToBin(ForegroundGray,BackgroundGray,Width,Height)\n\nConvert a region into a binary byte-image." },
    {"ErosionCircle", (PyCFunction)PyHirschRegionArray_ErosionCircle, METH_VARARGS, "ErosionCircle(Radius)\n\nErode a region with a circular structuring element." },
    {"FindNeighbors", (PyCFunction)PyHirschRegionArray_FindNeighbors, METH_VARARGS, "FindNeighbors(Regions2,MaxDistance)\n\nSearch direct neighbors." },
    {"Boundary", (PyCFunction)PyHirschRegionArray_Boundary, METH_VARARGS, "Boundary(BoundaryType)\n\nReduce a region to its boundary." },
    {"MergeRegionsLineScan", (PyCFunction)PyHirschRegionArray_MergeRegionsLineScan, METH_VARARGS, "MergeRegionsLineScan(PrevRegions,ImageHeight,MergeBorder,MaxImagesRegion)\n\nMerge regions from line scan images." },
    {"ZoomRegion", (PyCFunction)PyHirschRegionArray_ZoomRegion, METH_VARARGS, "ZoomRegion(ScaleWidth,ScaleHeight)\n\nZoom a region." },
    {"RankRegion", (PyCFunction)PyHirschRegionArray_RankRegion, METH_VARARGS, "RankRegion(Width,Height,Number)\n\nRank operator for regions." },
    {"MomentsRegion2nd", (PyCFunction)PyHirschRegionArray_MomentsRegion2nd, METH_NOARGS, "MomentsRegion2nd()\n\nGeometric moments of regions." },
    {"HitOrMissGolay", (PyCFunction)PyHirschRegionArray_HitOrMissGolay, METH_VARARGS, "HitOrMissGolay(GolayElement,Rotation)\n\nHit-or-miss operation for regions using the Golay alphabet." },
    {"Erosion1", (PyCFunction)PyHirschRegionArray_Erosion1, METH_VARARGS, "Erosion1(StructElement,Iterations)\n\nErode a region." },
    {"MomentsGrayPlane", (PyCFunction)PyHirschRegionArray_MomentsGrayPlane, METH_VARARGS, "MomentsGrayPlane(Image)\n\nCalculate gray value moments and approximation by a plane." },
    {"Erosion2", (PyCFunction)PyHirschRegionArray_Erosion2, METH_VARARGS, "Erosion2(StructElement,Row,Column,Iterations)\n\nErode a region (using a reference point)." },
    {"AreaHoles", (PyCFunction)PyHirschRegionArray_AreaHoles, METH_NOARGS, "AreaHoles()\n\nCompute the area of holes of regions." },
    {"EulerNumber", (PyCFunction)PyHirschRegionArray_EulerNumber, METH_NOARGS, "EulerNumber()\n\nCalculate the Euler number." },
    {"GenStructElements", (PyCFunction)PyHirschRegionArray_GenStructElements, METH_STATIC|METH_VARARGS, "GenStructElements(Type,Row,Column)\n\nGenerate standard structuring elements." },
    {"Eccentricity", (PyCFunction)PyHirschRegionArray_Eccentricity, METH_NOARGS, "Eccentricity()\n\nShape features derived from the ellipse parameters." },
    {"TopHat", (PyCFunction)PyHirschRegionArray_TopHat, METH_VARARGS, "TopHat(StructElement)\n\nCompute the top hat of regions." },
    {"Intersection", (PyCFunction)PyHirschRegionArray_Intersection, METH_VARARGS, "Intersection(Region2)\n\nCalculate the intersection of two regions." },
    {"ClipRegionRel", (PyCFunction)PyHirschRegionArray_ClipRegionRel, METH_VARARGS, "ClipRegionRel(Top,Bottom,Left,Right)\n\nClip a region relative to its size." },
    {"ShapeTrans", (PyCFunction)PyHirschRegionArray_ShapeTrans, METH_VARARGS, "ShapeTrans(Type)\n\nTransform the shape of a region." },
    {"JunctionsSkeleton", (PyCFunction)PyHirschRegionArray_JunctionsSkeleton, METH_NOARGS, "JunctionsSkeleton()\n\nFind junctions and end points in a skeleton." },
    {"DragRegion1", (PyCFunction)PyHirschRegionArray_DragRegion1, METH_VARARGS, "DragRegion1(WindowHandle)\n\nInteractive moving of a region." },
    {"DragRegion3", (PyCFunction)PyHirschRegionArray_DragRegion3, METH_VARARGS, "DragRegion3(MaskRegion,WindowHandle,Row,Column)\n\nInteractive movement of a region with restriction of positions." },
    {"DragRegion2", (PyCFunction)PyHirschRegionArray_DragRegion2, METH_VARARGS, "DragRegion2(WindowHandle,Row,Column)\n\nInteractive movement of a region with fixpoint specification." },
    {"EllipticAxis", (PyCFunction)PyHirschRegionArray_EllipticAxis, METH_NOARGS, "EllipticAxis()\n\nParameters of the equivalent ellipse." },
    {"DistanceTransform", (PyCFunction)PyHirschRegionArray_DistanceTransform, METH_VARARGS, "DistanceTransform(Metric,Foreground,Width,Height)\n\nCompute the distance transformation of a region." },
    {"ErosionSeq", (PyCFunction)PyHirschRegionArray_ErosionSeq, METH_VARARGS, "ErosionSeq(GolayElement,Iterations)\n\nErode a region sequentially." },
    {"PartitionRectangle", (PyCFunction)PyHirschRegionArray_PartitionRectangle, METH_VARARGS, "PartitionRectangle(Width,Height)\n\nPartition a region into rectangles of equal size." },
    {"PaintRegion", (PyCFunction)PyHirschRegionArray_PaintRegion, METH_VARARGS, "PaintRegion(Image,Grayval,Type)\n\nPaint regions into an image." },
    {"HammingDistanceNorm", (PyCFunction)PyHirschRegionArray_HammingDistanceNorm, METH_VARARGS, "HammingDistanceNorm(Regions2,Norm)\n\nHamming distance between two regions using normalization." },
    {"AffineTransRegion", (PyCFunction)PyHirschRegionArray_AffineTransRegion, METH_VARARGS, "AffineTransRegion(HomMat2D,Interpolate)\n\nApply an arbitrary affine 2D transformation to regions." },
    {"ErosionRectangle1", (PyCFunction)PyHirschRegionArray_ErosionRectangle1, METH_VARARGS, "ErosionRectangle1(Width,Height)\n\nErode a region with a rectangular structuring element." },
    {"OrientationRegion", (PyCFunction)PyHirschRegionArray_OrientationRegion, METH_NOARGS, "OrientationRegion()\n\nOrientation of a region." },
    {"ExpandGray", (PyCFunction)PyHirschRegionArray_ExpandGray, METH_VARARGS, "ExpandGray(Image,ForbiddenArea,Iterations,Mode,Threshold)\n\nFill gaps between regions (depending on gray value or color) or split\noverlapping regions." },
    {"GenRegionLine", (PyCFunction)PyHirschRegionArray_GenRegionLine, METH_STATIC|METH_VARARGS, "GenRegionLine(BeginRow,BeginCol,EndRow,EndCol)\n\nStore input lines as regions." },
    {"Interjacent", (PyCFunction)PyHirschRegionArray_Interjacent, METH_VARARGS, "Interjacent(Mode)\n\nPartition the image plane using given regions." },
    {"EliminateRuns", (PyCFunction)PyHirschRegionArray_EliminateRuns, METH_VARARGS, "EliminateRuns(ElimShorter,ElimLonger)\n\nEliminate runs of a given length." },
    {"OpeningCircle", (PyCFunction)PyHirschRegionArray_OpeningCircle, METH_VARARGS, "OpeningCircle(Radius)\n\nOpen a region with a circular structuring element." },
    {"GenEllipse", (PyCFunction)PyHirschRegionArray_GenEllipse, METH_STATIC|METH_VARARGS, "GenEllipse(Row,Column,Phi,Radius1,Radius2)\n\nCreate an ellipse." },
    {"EllipticAxisGray", (PyCFunction)PyHirschRegionArray_EllipticAxisGray, METH_VARARGS, "EllipticAxisGray(Image)\n\nCompute the orientation and major axes of a region in a gray value\nimage." },
    {"Complement", (PyCFunction)PyHirschRegionArray_Complement, METH_NOARGS, "Complement()\n\nReturn the complement of a region." },
    {"Append", (PyCFunction)PyHirschRegionArray_Append, METH_VARARGS, "Append(reg)\n\n" },
    {"DilationRectangle1", (PyCFunction)PyHirschRegionArray_DilationRectangle1, METH_VARARGS, "DilationRectangle1(Width,Height)\n\nDilate a region with a rectangular structuring element." },
    {"FuzzyPerimeter", (PyCFunction)PyHirschRegionArray_FuzzyPerimeter, METH_VARARGS, "FuzzyPerimeter(Image,Apar,Cpar)\n\nCalculate the fuzzy perimeter of a region." },
    {"SelectShape", (PyCFunction)PyHirschRegionArray_SelectShape, METH_VARARGS, "SelectShape(Features,Operation,Min,Max)\n\nChoose regions with the aid of shape features." },
    {"GenRandomRegions", (PyCFunction)PyHirschRegionArray_GenRandomRegions, METH_STATIC|METH_VARARGS, "GenRandomRegions(Type,WidthMin,WidthMax,HeightMin,HeightMax,PhiMin,PhiMax,NumRegions,Width,Height)\n\nCreate random regions like circles, rectangles and ellipses." },
    {"PlaneDeviation", (PyCFunction)PyHirschRegionArray_PlaneDeviation, METH_VARARGS, "PlaneDeviation(Image)\n\nCalculate the deviation of the gray values from the approximating\nimage plane." },
    {"Thinning", (PyCFunction)PyHirschRegionArray_Thinning, METH_VARARGS, "Thinning(StructElement1,StructElement2,Row,Column,Iterations)\n\nRemove the result of a hit-or-miss operation from a region." },
    {"WriteRegion", (PyCFunction)PyHirschRegionArray_WriteRegion, METH_VARARGS, "WriteRegion(FileName)\n\nWrite regions to a file." },
    {"MomentsRegionCentral", (PyCFunction)PyHirschRegionArray_MomentsRegionCentral, METH_NOARGS, "MomentsRegionCentral()\n\nGeometric moments of regions." },
    {"DilationGolay", (PyCFunction)PyHirschRegionArray_DilationGolay, METH_VARARGS, "DilationGolay(GolayElement,Iterations,Rotation)\n\nDilate a region with an element from the Golay alphabet." },
    {"FillUp", (PyCFunction)PyHirschRegionArray_FillUp, METH_NOARGS, "FillUp()\n\nFill up holes in regions." },
    {"ThickeningSeq", (PyCFunction)PyHirschRegionArray_ThickeningSeq, METH_VARARGS, "ThickeningSeq(GolayElement,Iterations)\n\nAdd the result of a hit-or-miss operation to a region (sequential)." },
    {"PolarTransRegion", (PyCFunction)PyHirschRegionArray_PolarTransRegion, METH_VARARGS, "PolarTransRegion(Row,Column,AngleStart,AngleEnd,RadiusStart,RadiusEnd,Width,Height,Interpolation)\n\nTransform a region within an annular arc to polar coordinates." },
    {"EntropyGray", (PyCFunction)PyHirschRegionArray_EntropyGray, METH_VARARGS, "EntropyGray(Image)\n\nDetermine the entropy and anisotropy of images." },
    {"SelectRegionSpatial", (PyCFunction)PyHirschRegionArray_SelectRegionSpatial, METH_VARARGS, "SelectRegionSpatial(Regions2,Direction)\n\nPose relation of regions." },
    {"FitSurfaceSecondOrder", (PyCFunction)PyHirschRegionArray_FitSurfaceSecondOrder, METH_VARARGS, "FitSurfaceSecondOrder(Image,Algorithm,Iterations,ClippingFactor)\n\nCalculate gray value moments and approximation by a second order surface." },
    {"SymmDifference", (PyCFunction)PyHirschRegionArray_SymmDifference, METH_VARARGS, "SymmDifference(Region2)\n\nCalculate the symmetric difference of two regions." },
    {"DistanceRrMin", (PyCFunction)PyHirschRegionArray_DistanceRrMin, METH_VARARGS, "DistanceRrMin(Regions2)\n\nMinimum distance between the contour pixels of two regions each." },
    {"SelectShapeProto", (PyCFunction)PyHirschRegionArray_SelectShapeProto, METH_VARARGS, "SelectShapeProto(Pattern,Feature,Min,Max)\n\nChoose regions having a certain relation to each other." },
    {"DistanceRrMinDil", (PyCFunction)PyHirschRegionArray_DistanceRrMinDil, METH_VARARGS, "DistanceRrMinDil(Regions2)\n\nMinimum distance between two regions with the help of dilatation." },
    {"FuzzyEntropy", (PyCFunction)PyHirschRegionArray_FuzzyEntropy, METH_VARARGS, "FuzzyEntropy(Image,Apar,Cpar)\n\nDetermine the fuzzy entropy of regions." },
    {"MoveRegion", (PyCFunction)PyHirschRegionArray_MoveRegion, METH_VARARGS, "MoveRegion(Row,Column)\n\nTranslate a region." },
    {"Union1", (PyCFunction)PyHirschRegionArray_Union1, METH_NOARGS, "Union1()\n\nReturn the union of all input regions." },
    {"Connection", (PyCFunction)PyHirschRegionArray_Connection, METH_NOARGS, "Connection()\n\nCompute connected components of a region." },
    {"Union2", (PyCFunction)PyHirschRegionArray_Union2, METH_VARARGS, "Union2(Region2)\n\nReturn the union of two regions." },
    {"ThinningGolay", (PyCFunction)PyHirschRegionArray_ThinningGolay, METH_VARARGS, "ThinningGolay(GolayElement,Rotation)\n\nRemove the result of a hit-or-miss operation from a region (using a\nGolay structuring element)." },
    {"DilationSeq", (PyCFunction)PyHirschRegionArray_DilationSeq, METH_VARARGS, "DilationSeq(GolayElement,Iterations)\n\nDilate a region sequentially." },
    {"OpeningSeg", (PyCFunction)PyHirschRegionArray_OpeningSeg, METH_VARARGS, "OpeningSeg(StructElement)\n\nSeparate overlapping regions." },
    {"MinkowskiAdd1", (PyCFunction)PyHirschRegionArray_MinkowskiAdd1, METH_VARARGS, "MinkowskiAdd1(StructElement,Iterations)\n\nPerform a Minkowski addition on a region." },
    {"MomentsRegion3rdInvar", (PyCFunction)PyHirschRegionArray_MomentsRegion3rdInvar, METH_NOARGS, "MomentsRegion3rdInvar()\n\nGeometric moments of regions." },
    {"GenCircle", (PyCFunction)PyHirschRegionArray_GenCircle, METH_STATIC|METH_VARARGS, "GenCircle(Row,Column,Radius)\n\nCreate a circle." },
    {"OpeningGolay", (PyCFunction)PyHirschRegionArray_OpeningGolay, METH_VARARGS, "OpeningGolay(GolayElement,Rotation)\n\nOpen a region with an element from the Golay alphabet." },
    {"Thickening", (PyCFunction)PyHirschRegionArray_Thickening, METH_VARARGS, "Thickening(StructElement1,StructElement2,Row,Column,Iterations)\n\nAdd the result of a hit-or-miss operation to a region." },
    {"AreaCenter", (PyCFunction)PyHirschRegionArray_AreaCenter, METH_NOARGS, "AreaCenter()\n\nArea and center of regions." },
    {"ClosingGolay", (PyCFunction)PyHirschRegionArray_ClosingGolay, METH_VARARGS, "ClosingGolay(GolayElement,Rotation)\n\nClose a region with an element from the Golay alphabet." },
    {"HClassName", (PyCFunction)PyHirschRegionArray_HClassName, METH_NOARGS, "HClassName()\n\nTools" },
    {"AddChannels", (PyCFunction)PyHirschRegionArray_AddChannels, METH_VARARGS, "AddChannels(Image)\n\nAdd gray values to regions." },
    {"MinkowskiSub1", (PyCFunction)PyHirschRegionArray_MinkowskiSub1, METH_VARARGS, "MinkowskiSub1(StructElement,Iterations)\n\nErode a region." },
    {"ReadRegion", (PyCFunction)PyHirschRegionArray_ReadRegion, METH_STATIC|METH_VARARGS, "ReadRegion(FileName)\n\nRead binary images or Halcon regions." },
    {"ConnectAndHoles", (PyCFunction)PyHirschRegionArray_ConnectAndHoles, METH_NOARGS, "ConnectAndHoles()\n\nNumber of connection components and holes" },
    {"MomentsRegion2ndInvar", (PyCFunction)PyHirschRegionArray_MomentsRegion2ndInvar, METH_NOARGS, "MomentsRegion2ndInvar()\n\nGeometric moments of regions." },
    {"TextLineSlant", (PyCFunction)PyHirschRegionArray_TextLineSlant, METH_VARARGS, "TextLineSlant(Image,CharHeight,SlantFrom,SlantTo)\n\nDetermines the slant of characters of a text line or paragraph." },
    {"LearnNdimNorm", (PyCFunction)PyHirschRegionArray_LearnNdimNorm, METH_VARARGS, "LearnNdimNorm(Background,Image,Metric,Distance,MinNumberPercent)\n\nConstruct classes for class_ndim_norm." },
    {"ClosingCircle", (PyCFunction)PyHirschRegionArray_ClosingCircle, METH_VARARGS, "ClosingCircle(Radius)\n\nClose a region with a circular structuring element." },
    {"GetRegionIndex", (PyCFunction)PyHirschRegionArray_GetRegionIndex, METH_VARARGS, "GetRegionIndex(Row,Column)\n\nIndex of all regions containing a given pixel." },
    {"GenRectangle1", (PyCFunction)PyHirschRegionArray_GenRectangle1, METH_STATIC|METH_VARARGS, "GenRectangle1(Row1,Column1,Row2,Column2)\n\nCreate a rectangle parallel to the coordinate axes." },
    {"CloseEdges", (PyCFunction)PyHirschRegionArray_CloseEdges, METH_VARARGS, "CloseEdges(EdgeImage,MinAmplitude)\n\nClose edge gaps using the edge amplitude image." },
    {"Fitting", (PyCFunction)PyHirschRegionArray_Fitting, METH_VARARGS, "Fitting(StructElements)\n\nPerform a closing after an opening with multiple structuring elements." },
    {"SelectCharacters", (PyCFunction)PyHirschRegionArray_SelectCharacters, METH_VARARGS, "SelectCharacters(DotPrint,StrokeWidth,CharWidth,CharHeight,Punctuation,DiacriticMarks,PartitionMethod,PartitionLines,FragmentDistance,ConnectFragments,ClutterSizeMax,StopAfter)\n\nSelects characters from a given region." },
    {"CoocFeatureImage", (PyCFunction)PyHirschRegionArray_CoocFeatureImage, METH_VARARGS, "CoocFeatureImage(Image,LdGray,Direction)\n\nCalculate a co-occurrence matrix and derive gray value features thereof." },
    {"NoiseDistributionMean", (PyCFunction)PyHirschRegionArray_NoiseDistributionMean, METH_VARARGS, "NoiseDistributionMean(Image,FilterSize)\n\nDetermine the noise distribution of an image." },
    {"Opening", (PyCFunction)PyHirschRegionArray_Opening, METH_VARARGS, "Opening(StructElement)\n\nOpen a region." },
    {"HammingChangeRegion", (PyCFunction)PyHirschRegionArray_HammingChangeRegion, METH_VARARGS, "HammingChangeRegion(Width,Height,Distance)\n\nGenerate a region having a given Hamming distance." },
    {"FillUpShape", (PyCFunction)PyHirschRegionArray_FillUpShape, METH_VARARGS, "FillUpShape(Feature,Min,Max)\n\nFill up holes in regions having given shape features." },
    {"Difference", (PyCFunction)PyHirschRegionArray_Difference, METH_VARARGS, "Difference(Sub)\n\nCalculate the difference of two regions." },
    {"TransposeRegion", (PyCFunction)PyHirschRegionArray_TransposeRegion, METH_VARARGS, "TransposeRegion(Row,Column)\n\nReflect a region about a point." },
    {"ClosingRectangle1", (PyCFunction)PyHirschRegionArray_ClosingRectangle1, METH_VARARGS, "ClosingRectangle1(Width,Height)\n\nClose a region with a rectangular structuring element." },
    {"HitOrMiss", (PyCFunction)PyHirschRegionArray_HitOrMiss, METH_VARARGS, "HitOrMiss(StructElement1,StructElement2,Row,Column)\n\nHit-or-miss operation for regions." },
    {"SplitSkeletonRegion", (PyCFunction)PyHirschRegionArray_SplitSkeletonRegion, METH_VARARGS, "SplitSkeletonRegion(MaxDistance)\n\nSplit lines represented by one pixel wide, non-branching regions." },
    {"InnerCircle", (PyCFunction)PyHirschRegionArray_InnerCircle, METH_NOARGS, "InnerCircle()\n\nLargest inner circle of a region." },
    {"DispRegion", (PyCFunction)PyHirschRegionArray_DispRegion, METH_VARARGS, "DispRegion(WindowHandle)\n\nDisplays regions in a window." },
    {"ProjectiveTransRegion", (PyCFunction)PyHirschRegionArray_ProjectiveTransRegion, METH_VARARGS, "ProjectiveTransRegion(HomMat2D,Interpolation)\n\nApply a projective transformation to a region." },
    {"ErosionGolay", (PyCFunction)PyHirschRegionArray_ErosionGolay, METH_VARARGS, "ErosionGolay(GolayElement,Iterations,Rotation)\n\nErode a region with an element from the Golay alphabet." },
    {"RegionToMean", (PyCFunction)PyHirschRegionArray_RegionToMean, METH_VARARGS, "RegionToMean(Image)\n\nPaint regions with their average gray value." },
    {"Dilation2", (PyCFunction)PyHirschRegionArray_Dilation2, METH_VARARGS, "Dilation2(StructElement,Row,Column,Iterations)\n\nDilate a region (using a reference point)." },
    {"Dilation1", (PyCFunction)PyHirschRegionArray_Dilation1, METH_VARARGS, "Dilation1(StructElement,Iterations)\n\nDilate a region." },
    {"Contlength", (PyCFunction)PyHirschRegionArray_Contlength, METH_NOARGS, "Contlength()\n\nContour length of a region." },
    {"TestRegionPoint", (PyCFunction)PyHirschRegionArray_TestRegionPoint, METH_VARARGS, "TestRegionPoint(Row,Column)\n\nTest if the region consists of the given point." },
    {"DilationCircle", (PyCFunction)PyHirschRegionArray_DilationCircle, METH_VARARGS, "DilationCircle(Radius)\n\nDilate a region with a circular structuring element." },
    {"Circularity", (PyCFunction)PyHirschRegionArray_Circularity, METH_NOARGS, "Circularity()\n\nShape factor for the circularity (similarity to a circle) of a region." },
    {"Rectangularity", (PyCFunction)PyHirschRegionArray_Rectangularity, METH_NOARGS, "Rectangularity()\n\nShape factor for the rectangularity of a region." },
    {"GenContourRegionXld", (PyCFunction)PyHirschRegionArray_GenContourRegionXld, METH_VARARGS, "GenContourRegionXld(Mode)\n\nGenerate XLD contours from regions." },
    {"MomentsRegion3rd", (PyCFunction)PyHirschRegionArray_MomentsRegion3rd, METH_NOARGS, "MomentsRegion3rd()\n\nGeometric moments of regions." },
    {"ExpandRegion", (PyCFunction)PyHirschRegionArray_ExpandRegion, METH_VARARGS, "ExpandRegion(ForbiddenArea,Iterations,Mode)\n\nFill gaps between regions or split overlapping regions." },
    {"MirrorRegion", (PyCFunction)PyHirschRegionArray_MirrorRegion, METH_VARARGS, "MirrorRegion(Mode,WidthHeight)\n\nReflect a region about an axis." },
    {"DeleteArray", (PyCFunction)PyHirschRegionArray_DeleteArray, METH_NOARGS, "DeleteArray()\n\n" },
    {"BottomHat", (PyCFunction)PyHirschRegionArray_BottomHat, METH_VARARGS, "BottomHat(StructElement)\n\nCompute the bottom hat of regions." },
    {"DiameterRegion", (PyCFunction)PyHirschRegionArray_DiameterRegion, METH_NOARGS, "DiameterRegion()\n\nMaximal distance between two boundary points of a region." },