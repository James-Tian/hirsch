    {"GenCrossContourXld", (PyCFunction)PyHirschXLDContArray_GenCrossContourXld, METH_STATIC|METH_VARARGS, "GenCrossContourXld(Row,Col,Size,Angle)\n\nGenerate one XLD contour in the shape of a cross for each input point." },
    {"IntersectionClosedContoursXld", (PyCFunction)PyHirschXLDContArray_IntersectionClosedContoursXld, METH_VARARGS, "IntersectionClosedContoursXld(Contours2)\n\nIntersection of closed contours." },
    {"DistanceCcMin", (PyCFunction)PyHirschXLDContArray_DistanceCcMin, METH_VARARGS, "DistanceCcMin(Contour2,Mode)\n\nCalculate the minimum distance between two contours." },
    {"UnionAdjacentContoursXld", (PyCFunction)PyHirschXLDContArray_UnionAdjacentContoursXld, METH_VARARGS, "UnionAdjacentContoursXld(MaxDistAbs,MaxDistRel,Mode)\n\nUnion of contours of which the end points are close together." },
    {"UnionStraightContoursHistoXld", (PyCFunction)PyHirschXLDContArray_UnionStraightContoursHistoXld, METH_VARARGS, "UnionStraightContoursHistoXld(RefLineStartRow,RefLineStartColumn,RefLineEndRow,RefLineEndColumn,Width,MaxWidth,FilterSize)\n\nMerge neighboring straight contours having a similar distance from a \ngiven line." },
    {"CopyHXLDArray", (PyCFunction)PyHirschXLDContArray_CopyHXLDArray, METH_VARARGS, "CopyHXLDArray(in)\n\n" },
    {"MomentsAnyXld", (PyCFunction)PyHirschXLDContArray_MomentsAnyXld, METH_VARARGS, "MomentsAnyXld(Mode,PointOrder,Area,CenterRow,CenterCol,P,Q)\n\nArbitrary geometric moments of contours or polygons." },
    {"EccentricityXld", (PyCFunction)PyHirschXLDContArray_EccentricityXld, METH_NOARGS, "EccentricityXld()\n\nShape features derived from the ellipse parameters of contours or polygons." },
    {"GetRegressParamsXld", (PyCFunction)PyHirschXLDContArray_GetRegressParamsXld, METH_NOARGS, "GetRegressParamsXld()\n\nReturn XLD contour parameters." },
    {"AreaCenterPointsXld", (PyCFunction)PyHirschXLDContArray_AreaCenterPointsXld, METH_NOARGS, "AreaCenterPointsXld()\n\nArea and center of gravity (centroid) of contours and polygons\ntreated as point clouds." },
    {"SmallestRectangle2Xld", (PyCFunction)PyHirschXLDContArray_SmallestRectangle2Xld, METH_NOARGS, "SmallestRectangle2Xld()\n\nSmallest enclosing rectangle with arbitrary orientation of contours or \npolygons." },
    {"GenRectangle2ContourXld", (PyCFunction)PyHirschXLDContArray_GenRectangle2ContourXld, METH_STATIC|METH_VARARGS, "GenRectangle2ContourXld(Row,Column,Phi,Length1,Length2)\n\nCreate an XLD contour in the shape of a rectangle." },
    {"CropContoursXld", (PyCFunction)PyHirschXLDContArray_CropContoursXld, METH_VARARGS, "CropContoursXld(Row1,Col1,Row2,Col2,CloseContours)\n\nCrop an XLD contour." },
    {"DifferenceClosedContoursXld", (PyCFunction)PyHirschXLDContArray_DifferenceClosedContoursXld, METH_VARARGS, "DifferenceClosedContoursXld(Sub)\n\nDifference of closed contours." },
    {"CompactnessXld", (PyCFunction)PyHirschXLDContArray_CompactnessXld, METH_NOARGS, "CompactnessXld()\n\nShape factor for the compactness of contours or polygons." },
    {"MomentsPointsXld", (PyCFunction)PyHirschXLDContArray_MomentsPointsXld, METH_NOARGS, "MomentsPointsXld()\n\nGeometric moments M20, M02, and M11\nof contours or polygons treated as point clouds." },
    {"EccentricityPointsXld", (PyCFunction)PyHirschXLDContArray_EccentricityPointsXld, METH_NOARGS, "EccentricityPointsXld()\n\nAnisometry of contours or polygons treated as point clouds." },
    {"OrientationPointsXld", (PyCFunction)PyHirschXLDContArray_OrientationPointsXld, METH_NOARGS, "OrientationPointsXld()\n\nOrientation of contours or polygons treated as point clouds." },
    {"SegmentContoursXld", (PyCFunction)PyHirschXLDContArray_SegmentContoursXld, METH_VARARGS, "SegmentContoursXld(Mode,SmoothCont,MaxLineDist1,MaxLineDist2)\n\nSegment XLD contours into line segments and circular or elliptic arcs." },
    {"UnionCocircularContoursXld", (PyCFunction)PyHirschXLDContArray_UnionCocircularContoursXld, METH_VARARGS, "UnionCocircularContoursXld(MaxArcAngleDiff,MaxArcOverlap,MaxTangentAngle,MaxDist,MaxRadiusDiff,MaxCenterDist,MergeSmallContours,Iterations)\n\nMerge contours that belong to the same circle." },
    {"GenEllipseContourXld", (PyCFunction)PyHirschXLDContArray_GenEllipseContourXld, METH_STATIC|METH_VARARGS, "GenEllipseContourXld(Row,Column,Phi,Radius1,Radius2,StartPhi,EndPhi,PointOrder,Resolution)\n\nCreation of an XLD contour corresponding to an elliptic arc." },
    {"GenCircleContourXld", (PyCFunction)PyHirschXLDContArray_GenCircleContourXld, METH_STATIC|METH_VARARGS, "GenCircleContourXld(Row,Column,Radius,StartPhi,EndPhi,PointOrder,Resolution)\n\nCreate XLD contours corresponding to circles or circular arcs." },
    {"ClassDBID", (PyCFunction)PyHirschXLDContArray_ClassDBID, METH_NOARGS, "ClassDBID()\n\n" },
    {"FitCircleContourXld", (PyCFunction)PyHirschXLDContArray_FitCircleContourXld, METH_VARARGS, "FitCircleContourXld(Algorithm,MaxNumPoints,MaxClosureDist,ClippingEndPoints,Iterations,ClippingFactor)\n\nApproximation of XLD contours by circles." },
    {"CopyHXLDContArray", (PyCFunction)PyHirschXLDContArray_CopyHXLDContArray, METH_VARARGS, "CopyHXLDContArray(in)\n\n" },
    {"UnionCollinearContoursExtXld", (PyCFunction)PyHirschXLDContArray_UnionCollinearContoursExtXld, METH_VARARGS, "UnionCollinearContoursExtXld(MaxDistAbs,MaxDistRel,MaxShift,MaxAngle,MaxOverlap,MaxRegrError,MaxCosts,WeightDist,WeightShift,WeightAngle,WeightLink,WeightRegr,Mode)\n\nUnion of collinear contours (operator with extended functionality)." },
    {"SmallestCircleXld", (PyCFunction)PyHirschXLDContArray_SmallestCircleXld, METH_NOARGS, "SmallestCircleXld()\n\nSmallest enclosing circle of contours or polygons." },
    {"EllipticAxisPointsXld", (PyCFunction)PyHirschXLDContArray_EllipticAxisPointsXld, METH_NOARGS, "EllipticAxisPointsXld()\n\nParameters of the equivalent ellipse of contours or polygons treated as \npoint clouds." },
    {"SelectXldPoint", (PyCFunction)PyHirschXLDContArray_SelectXldPoint, METH_VARARGS, "SelectXldPoint(Row,Column)\n\nChoose all contours or polygons containing a given point." },
    {"RegressContoursXld", (PyCFunction)PyHirschXLDContArray_RegressContoursXld, METH_VARARGS, "RegressContoursXld(Mode,Iterations)\n\nCalculate the parameters of a regression line to an XLD contour." },
    {"Union2ClosedContoursXld", (PyCFunction)PyHirschXLDContArray_Union2ClosedContoursXld, METH_VARARGS, "Union2ClosedContoursXld(Contours2)\n\nUnion of closed contours." },
    {"PaintXld", (PyCFunction)PyHirschXLDContArray_PaintXld, METH_VARARGS, "PaintXld(Image,Grayval)\n\nPaint XLD objects into an image." },
    {"ReadContourXldDxf", (PyCFunction)PyHirschXLDContArray_ReadContourXldDxf, METH_STATIC|METH_VARARGS, "ReadContourXldDxf(FileName,GenParamNames,GenParamValues)\n\nRead XLD contours from a DXF file." },
    {"UnionCollinearContoursXld", (PyCFunction)PyHirschXLDContArray_UnionCollinearContoursXld, METH_VARARGS, "UnionCollinearContoursXld(MaxDistAbs,MaxDistRel,MaxShift,MaxAngle,Mode)\n\nUnion of collinear contours." },
    {"SymmDifferenceClosedContoursXld", (PyCFunction)PyHirschXLDContArray_SymmDifferenceClosedContoursXld, METH_VARARGS, "SymmDifferenceClosedContoursXld(Contours2)\n\nSymmetric difference of closed contours." },
    {"SelectShapeXld", (PyCFunction)PyHirschXLDContArray_SelectShapeXld, METH_VARARGS, "SelectShapeXld(Features,Operation,Min,Max)\n\nSelect contours or polygons using shape features." },
    {"SortContoursXld", (PyCFunction)PyHirschXLDContArray_SortContoursXld, METH_VARARGS, "SortContoursXld(SortMode,Order,RowOrCol)\n\nSort contours with respect to their relative position." },
    {"MergeContLineScanXld", (PyCFunction)PyHirschXLDContArray_MergeContLineScanXld, METH_VARARGS, "MergeContLineScanXld(PrevConts,ImageHeight,Margin,MergeBorder,MaxImagesCont)\n\nMerge XLD contours from successive line scan images." },
    {"FitLineContourXld", (PyCFunction)PyHirschXLDContArray_FitLineContourXld, METH_VARARGS, "FitLineContourXld(Algorithm,MaxNumPoints,ClippingEndPoints,Iterations,ClippingFactor)\n\nApproximation of XLD contours by line segments." },
    {"DiameterXld", (PyCFunction)PyHirschXLDContArray_DiameterXld, METH_NOARGS, "DiameterXld()\n\nMaximum distance between two contour or polygon points." },
    {"ClipContoursXld", (PyCFunction)PyHirschXLDContArray_ClipContoursXld, METH_VARARGS, "ClipContoursXld(Row1,Column1,Row2,Column2)\n\nClip an XLD contour." },
    {"ReadContourXldArcInfo", (PyCFunction)PyHirschXLDContArray_ReadContourXldArcInfo, METH_STATIC|METH_VARARGS, "ReadContourXldArcInfo(FileName)\n\nRead XLD contours to a file in ARC/INFO generate format." },
    {"AddNoiseWhiteContourXld", (PyCFunction)PyHirschXLDContArray_AddNoiseWhiteContourXld, METH_VARARGS, "AddNoiseWhiteContourXld(NumRegrPoints,Amp)\n\nAdd noise to XLD contours." },
    {"LengthXld", (PyCFunction)PyHirschXLDContArray_LengthXld, METH_NOARGS, "LengthXld()\n\nLength of contours or polygons." },
    {"MomentsAnyPointsXld", (PyCFunction)PyHirschXLDContArray_MomentsAnyPointsXld, METH_VARARGS, "MomentsAnyPointsXld(Mode,Area,CenterRow,CenterCol,P,Q)\n\nArbitrary geometric moments of contours or polygons treated as point\nclouds." },
    {"DistEllipseContourXld", (PyCFunction)PyHirschXLDContArray_DistEllipseContourXld, METH_VARARGS, "DistEllipseContourXld(Mode,MaxNumPoints,ClippingEndPoints,Row,Column,Phi,Radius1,Radius2)\n\nDistance of contours to an ellipse." },
    {"RadialDistortionSelfCalibration", (PyCFunction)PyHirschXLDContArray_RadialDistortionSelfCalibration, METH_VARARGS, "RadialDistortionSelfCalibration(Width,Height,InlierThreshold,RandSeed,DistortionModel,DistortionCenter,PrincipalPointVar)\n\nCalibrate the radial distortion." },
    {"ClipEndPointsContoursXld", (PyCFunction)PyHirschXLDContArray_ClipEndPointsContoursXld, METH_VARARGS, "ClipEndPointsContoursXld(Mode,Length)\n\nClip the end points of an XLD contour." },
    {"TestSelfIntersectionXld", (PyCFunction)PyHirschXLDContArray_TestSelfIntersectionXld, METH_VARARGS, "TestSelfIntersectionXld(CloseXLD)\n\nTest XLD contours or polygons for self intersection." },
    {"Elem", (PyCFunction)PyHirschXLDContArray_Elem, METH_VARARGS, "Elem(index)\n\nAccessing array elements without index checking -> fast AND risky" },
    {"LocalMaxContoursXld", (PyCFunction)PyHirschXLDContArray_LocalMaxContoursXld, METH_VARARGS, "LocalMaxContoursXld(Image,MinPercent,MinDiff,Distance)\n\nSelect XLD contours with a local maximum of gray values." },
    {"ProjectiveTransContourXld", (PyCFunction)PyHirschXLDContArray_ProjectiveTransContourXld, METH_VARARGS, "ProjectiveTransContourXld(HomMat2D)\n\nApply a projective transformation to an XLD contour." },
    {"AffineTransContourXld", (PyCFunction)PyHirschXLDContArray_AffineTransContourXld, METH_VARARGS, "AffineTransContourXld(HomMat2D)\n\nApply an arbitrary affine 2D transformation to XLD contours." },
    {"CloseContoursXld", (PyCFunction)PyHirschXLDContArray_CloseContoursXld, METH_NOARGS, "CloseContoursXld()\n\nClose an XLD contour." },
    {"UnionStraightContoursXld", (PyCFunction)PyHirschXLDContArray_UnionStraightContoursXld, METH_VARARGS, "UnionStraightContoursXld(MaxDist,MaxDiff,Percent,Mode,Iterations)\n\nMerge neighboring straight contours having a similar direction." },
    {"MomentsXld", (PyCFunction)PyHirschXLDContArray_MomentsXld, METH_NOARGS, "MomentsXld()\n\nGeometric moments M20, M02, and \nM11 of contours or polygons." },
    {"GenParallelContourXld", (PyCFunction)PyHirschXLDContArray_GenParallelContourXld, METH_VARARGS, "GenParallelContourXld(Mode,Distance)\n\nCompute the parallel contour of an XLD contour." },
    {"TestXldPoint", (PyCFunction)PyHirschXLDContArray_TestXldPoint, METH_VARARGS, "TestXldPoint(Row,Column)\n\nTest whether one or more contours or polygons enclose the given point(s)." },
    {"ContourToWorldPlaneXld", (PyCFunction)PyHirschXLDContArray_ContourToWorldPlaneXld, METH_VARARGS, "ContourToWorldPlaneXld(CamParam,WorldPose,Scale)\n\nTransform an XLD contour into the plane z=0 of a world coordinate system." },
    {"PolarTransContourXld", (PyCFunction)PyHirschXLDContArray_PolarTransContourXld, METH_VARARGS, "PolarTransContourXld(Row,Column,AngleStart,AngleEnd,RadiusStart,RadiusEnd,Width,Height)\n\nTransform a contour in an annular arc to polar coordinates." },
    {"DistanceCc", (PyCFunction)PyHirschXLDContArray_DistanceCc, METH_VARARGS, "DistanceCc(Contour2,Mode)\n\nCalculate the distance between two contours." },
    {"FitEllipseContourXld", (PyCFunction)PyHirschXLDContArray_FitEllipseContourXld, METH_VARARGS, "FitEllipseContourXld(Algorithm,MaxNumPoints,MaxClosureDist,ClippingEndPoints,VossTabSize,Iterations,ClippingFactor)\n\nApproximation of XLD contours by ellipses or elliptic arcs." },
    {"InstClassName", (PyCFunction)PyHirschXLDContArray_InstClassName, METH_NOARGS, "InstClassName()\n\n" },
    {"CircularityXld", (PyCFunction)PyHirschXLDContArray_CircularityXld, METH_NOARGS, "CircularityXld()\n\nShape factor for the circularity (similarity to a circle) of contours or \npolygons." },
    {"OrientationXld", (PyCFunction)PyHirschXLDContArray_OrientationXld, METH_NOARGS, "OrientationXld()\n\nOrientation of contours or polygons." },
    {"ShapeTransXld", (PyCFunction)PyHirschXLDContArray_ShapeTransXld, METH_VARARGS, "ShapeTransXld(Type)\n\nTransform the shape of contours or polygons." },
    {"HClassName", (PyCFunction)PyHirschXLDContArray_HClassName, METH_NOARGS, "HClassName()\n\nTools" },
    {"SmoothContoursXld", (PyCFunction)PyHirschXLDContArray_SmoothContoursXld, METH_VARARGS, "SmoothContoursXld(NumRegrPoints)\n\nSmooth an XLD contour." },
    {"GetCirclePose", (PyCFunction)PyHirschXLDContArray_GetCirclePose, METH_VARARGS, "GetCirclePose(CamParam,Radius,OutputType)\n\nDetermine the 3D pose of a circle from its perspective 2D projection." },
    {"SelectContoursXld", (PyCFunction)PyHirschXLDContArray_SelectContoursXld, METH_VARARGS, "SelectContoursXld(Feature,Min1,Max1,Min2,Max2)\n\nSelect XLD contours according to several features." },
    {"AreaCenterXld", (PyCFunction)PyHirschXLDContArray_AreaCenterXld, METH_NOARGS, "AreaCenterXld()\n\nArea and center of gravity (centroid) of contours and polygons." },
    {"WriteContourXldDxf", (PyCFunction)PyHirschXLDContArray_WriteContourXldDxf, METH_VARARGS, "WriteContourXldDxf(FileName)\n\nWrite XLD contours to a file in DXF format." },
    {"ChangeRadialDistortionContoursXld", (PyCFunction)PyHirschXLDContArray_ChangeRadialDistortionContoursXld, METH_VARARGS, "ChangeRadialDistortionContoursXld(CamParamIn,CamParamOut)\n\nChange the radial distortion of contours." },
    {"DispXld", (PyCFunction)PyHirschXLDContArray_DispXld, METH_VARARGS, "DispXld(WindowHandle)\n\nDisplay an XLD object." },
    {"EllipticAxisXld", (PyCFunction)PyHirschXLDContArray_EllipticAxisXld, METH_NOARGS, "EllipticAxisXld()\n\nParameters of the equivalent ellipse of contours or polygons." },
    {"FitRectangle2ContourXld", (PyCFunction)PyHirschXLDContArray_FitRectangle2ContourXld, METH_VARARGS, "FitRectangle2ContourXld(Algorithm,MaxNumPoints,MaxClosureDist,ClippingEndPoints,Iterations,ClippingFactor)\n\nFit rectangles to XLD contours." },
    {"GetRectanglePose", (PyCFunction)PyHirschXLDContArray_GetRectanglePose, METH_VARARGS, "GetRectanglePose(CamParam,Width,Height,WeightingMode,ClippingFactor)\n\nDetermine the 3D pose of a rectangle from its perspective 2D\nprojection" },
    {"ConvexityXld", (PyCFunction)PyHirschXLDContArray_ConvexityXld, METH_NOARGS, "ConvexityXld()\n\nShape factor for the convexity of contours or polygons." },
    {"ContourPointNumXld", (PyCFunction)PyHirschXLDContArray_ContourPointNumXld, METH_NOARGS, "ContourPointNumXld()\n\nReturn the number of points in an XLD contour." },
    {"DeleteArray", (PyCFunction)PyHirschXLDContArray_DeleteArray, METH_NOARGS, "DeleteArray()\n\n" },
    {"SmallestRectangle1Xld", (PyCFunction)PyHirschXLDContArray_SmallestRectangle1Xld, METH_NOARGS, "SmallestRectangle1Xld()\n\nEnclosing rectangle parallel to the coordinate axes of contours or polygons." },
    {"Append", (PyCFunction)PyHirschXLDContArray_Append, METH_VARARGS, "Append(cont)\n\n" },
    {"WriteContourXldArcInfo", (PyCFunction)PyHirschXLDContArray_WriteContourXldArcInfo, METH_VARARGS, "WriteContourXldArcInfo(FileName)\n\nWrite XLD contours to a file in ARC/INFO generate format." },